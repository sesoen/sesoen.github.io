--Introductory Problems
--1. Which shippers do we use? 
SELECT *
FROM Shippers;

--2. Certain fields from Categories
SELECT CategoryName, Description
FROM Categories;

--3 & 4. US Sales Reps
SELECT [LastName], [FirstName], [HireDate]
FROM [dbo].[Employees]
WHERE [Title]='Sales Representative' 
AND [Country]='USA';

--5. Orders placed by EmployeeID #5
 SELECT [OrderID]
FROM [dbo].[Orders]
WHERE [EmployeeID]=5;

--6. Suppliers and our contact's title
SELECT [SupplierID], [ContactName], [ContactTitle] 
FROM [dbo].[Suppliers]
WHERE [ContactTitle] <> 'Marketing Manager';

--7. Products with "queso" in the ProductName
SELECT [ProductID], [ProductName]
FROM [dbo].[Products]
WHERE [ProductName] LIKE '%queso%';

--8. Orders shipping to France or Belguim
SELECT [OrderID], [CustomerID], [ShipCountry]
FROM [dbo].[Orders] 
WHERE [ShipCountry] = 'France' OR [ShipCountry] = 'Belgium';

--9. Orders shipping to any Latin American country
SELECT [OrderID], [CustomerID], [ShipCountry]
FROM [dbo].[Orders] 
WHERE [ShipCountry] IN ('Brazil', 'Mexico', 'Argentina', 'Venezuela');	

--10. Employees in order of age
SELECT FirstName, LastName, Title, BirthDate
FROM [dbo].[Employees]
ORDER BY BirthDate;

--12. Employees full name
SELECT FirstName, LastName, CONCAT(FirstName, ' ', LastName) AS FullName
FROM Employees;

--13. Order details per line item
SELECT OrderID, ProductID, UnitPrice, Quantity, (UnitPrice*Quantity) AS TotalPrice
FROM OrderDetails
ORDER BY OrderID, ProductID;

--14. How many customers do we have?
SELECT COUNT(DISTINCT(CustomerID))
FROM Customers;

--15. When was the first order placed?
SELECT MIN([OrderDate])
FROM [dbo].[Orders]

--16. Countries where there are customers
SELECT DISTINCT([Country])
FROM [dbo].[Customers]

--17. Contact titles for customers
SELECT DISTINCT(ContactTitle), COUNT(ContactTitle) AS TotalContactTitle
FROM [dbo].[Customers]
GROUP BY ContactTitle
ORDER BY TotalContactTitle DESC;

--18. Products with associated supplier names
SELECT p.ProductID, p.ProductName, s.CompanyName
FROM [dbo].[Products] AS p
	JOIN [dbo].[Suppliers] AS s
	ON p.SupplierID=s.SupplierID
ORDER BY p.ProductID

--19. Orders and the shipper that was used
SELECT OrderID, CONVERT(date, OrderDate) ,CompanyName
FROM Orders AS o
	JOIN Shippers AS s
	ON o.ShipVia=s.ShipperID
WHERE OrderID < 10270;

--------------------------------------------------------------------------
--Intermediate Problems
--20. Categories, and the total products in each category
SELECT CategoryName, COUNT(DISTINCT ProductID) AS TotalProducts
FROM [dbo].[Categories] AS c
JOIN [dbo].[Products] AS p
ON c.[CategoryID] = p.CategoryID
GROUP BY CategoryName

--21. Total customers per country/city
SELECT Country, City, COUNT(DISTINCT CustomerID) AS TotalCustomers
FROM [dbo].[Customers]
GROUP BY Country, City

--22. Products that need reordering
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM Products AS p
WHERE UnitsInStock <= ReorderLevel;

--23. Products that need reordering, cont.
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued
FROM Products
WHERE (UnitsInStock+UnitsOnOrder)<=ReorderLevel AND Discontinued=0
ORDER BY ProductID; 

--24. Customer list by region
SELECT CustomerID, CompanyName, Region
FROM Customers
ORDER BY 
	CASE WHEN Region IS NULL 
	THEN 1
	ELSE 0
END, Region, CustomerID;

--25. Three ship countries with highest average freight overall, in descending order by freight. 
SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight
FROM Orders
GROUP BY ShipCountry
ORDER BY AverageFreight DESC;

--26. #25, but only for orders from 2015
SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight
FROM Orders
WHERE YEAR(OrderDate)=2015
GROUP BY ShipCountry
ORDER BY AverageFreight DESC;

--28. #25 but only for orders from the past 12 months
SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight
FROM Orders
WHERE OrderDate BETWEEN
	(SELECT MAX(OrderDate)-365
	FROM Orders)
	AND 
	(SELECT MAX(OrderDate)
	FROM Orders)
GROUP BY ShipCountry
ORDER BY AverageFreight DESC;

--29. Employee/Order Detail Report
SELECT e.EmployeeID, e.LastName, od.OrderID, p.ProductName, od.Quantity
FROM Employees as e
JOIN Orders as o ON e.EmployeeID=o.EmployeeID
JOIN OrderDetails as od ON o.OrderID=od.OrderID
JOIN Products as p ON od.ProductID=p.ProductID;

--30. Customers with no orders
SELECT c.CustomerID, o.CustomerID
FROM Customers AS c
FULL JOIN Orders AS o
	ON o.CustomerID=c.CustomerID
WHERE o.CustomerID IS NULL

--31. Customers with no orders for EmployeeID 4
WITH Orders2 AS (
	SELECT OrderID, CustomerID
	FROM Orders
	WHERE EmployeeID=4
	)
SELECT c.CustomerID AS Customer_ID, o.CustomerID AS Order_ID
FROM Customers AS c
FULL JOIN Orders2 AS o
	ON o.CustomerID=c.CustomerID
WHERE OrderID IS NULL
ORDER BY Customer_ID

---------------------------------------------------------------------
--Advanced Problems
--32. Customers w/at least one order totaling $10,000 or more in the year 2016 (for VIP gift)
SELECT c.CustomerID, CompanyName, o.OrderID, SUM(UnitPrice*Quantity) AS TotalOrderAmount
FROM Customers AS c
	JOIN Orders AS o
		ON o.CustomerID=c.CustomerID
	JOIN OrderDetails AS od
		ON od.OrderID=o.OrderID
WHERE YEAR(OrderDate) = 2016 
GROUP BY c.CustomerID, CompanyName, o.OrderID
HAVING SUM(UnitPrice*Quantity) >= 10000

--33. Customers w/at least $15,000 in total orders for 2016
SELECT c.CustomerID, CompanyName, SUM(UnitPrice*Quantity) AS TotalOrderAmount
FROM Customers AS c
	JOIN Orders AS o
		ON o.CustomerID=c.CustomerID
	JOIN OrderDetails AS od
		ON od.OrderID=o.OrderID
WHERE YEAR(OrderDate) = 2016 
GROUP BY c.CustomerID, CompanyName
HAVING SUM(UnitPrice*Quantity) >= 15000
ORDER BY TotalOrderAmount DESC

--34. Customers w/at least $15,000 in total orders for 2016 and their total order amount after discounts
SELECT c.CustomerID, CompanyName, SUM(UnitPrice*Quantity) AS TotalsWithoutDiscount, 
	(SUM(UnitPrice*Quantity) - SUM(Discount*UnitPrice*Quantity)) AS TotalsWithDiscount
FROM Customers AS c
	JOIN Orders AS o
		ON o.CustomerID=c.CustomerID
	JOIN OrderDetails AS od
		ON od.OrderID=o.OrderID
WHERE YEAR(OrderDate) = 2016 
GROUP BY c.CustomerID, CompanyName
HAVING SUM(UnitPrice*Quantity) >= 15000
ORDER BY TotalsWithDiscount DESC

--35. Orders placed on the last day of the month
SELECT EmployeeID, OrderID, OrderDate
FROM Orders
WHERE OrderDate IN (
	SELECT EOMONTH(OrderDate)
	FROM Orders
	)
ORDER BY EmployeeID, OrderID

--36. Orders w/multiple line items (to assist mobile app developers)
SELECT TOP 10 OrderID, COUNT(DISTINCT(ProductID)) AS TotalOrderDetails
FROM OrderDetails
GROUP BY OrderID 
ORDER BY TotalOrderDetails DESC;

--37. Random 2% assortment of orders (to assist mobile app developers)**
SELECT top 2 percent OrderID
FROM Orders
ORDER BY NewID()

--38. Orders -- accidental double entry
SELECT od1.OrderID
FROM [dbo].[OrderDetails] as od1
	JOIN OrderDetails as od2
	ON od1.OrderID=od2.OrderID
WHERE od1.ProductID <>od2.ProductID 
	AND od1.Quantity=od2.Quantity
	AND od1.OrderID=od2.OrderID
	AND od1.Quantity >60
GROUP BY od1.OrderID

--39. Order details of potential accidental double-entry
SELECT OrderID, ProductID, UnitPrice, Quantity, Discount
FROM OrderDetails
WHERE OrderID IN
	(SELECT od1.OrderID
	FROM [dbo].[OrderDetails] as od1
		JOIN OrderDetails as od2
		ON od1.OrderID=od2.OrderID
	WHERE od1.ProductID <>od2.ProductID 
		AND od1.Quantity=od2.Quantity
		AND od1.OrderID=od2.OrderID
		AND od1.Quantity >60
	GROUP BY od1.OrderID, od1.ProductID, od1.UnitPrice, od1.Quantity, od1.Discount)
ORDER BY OrderID, Quantity

--41. Late orders
SELECT OrderID, OrderDate, RequiredDate, ShippedDate
FROM Orders
WHERE RequiredDate <= ShippedDate

--42. Number of late orders per employee
SELECT e.EmployeeID, LastName, COUNT(OrderID) AS TotalLateOrders
FROM Orders AS o
	JOIN Employees AS e
	ON o.EmployeeID=e.EmployeeID
WHERE RequiredDate <= ShippedDate
GROUP BY e.EmployeeID, LastName
ORDER BY COUNT(OrderID) DESC

--43. All orders vs. Late orders per employee
WITH late AS (
	SELECT e.EmployeeID, LastName, COUNT(OrderID) AS TotalLateOrders
	FROM Orders AS o
	JOIN Employees AS e
	ON o.EmployeeID=e.EmployeeID
	WHERE RequiredDate <= ShippedDate
	GROUP BY e.EmployeeID, LastName
	)
SELECT Orders.EmployeeID, LastName, COUNT(OrderID) AS AllOrders, TotalLateOrders
FROM Orders 
	JOIN late
	ON Orders.EmployeeID=late.EmployeeID
GROUP BY Orders.EmployeeID, LastName, TotalLateOrders
ORDER BY EmployeeID;

--Two #44's: 
--44. Show all employees in result:: (mine only) produces NULL in both LastName and LateOrders
WITH late AS (
	SELECT e.EmployeeID, LastName, COUNT(OrderID) AS TotalLateOrders
	FROM Orders AS o
	JOIN Employees AS e
	ON o.EmployeeID=e.EmployeeID
	WHERE RequiredDate <= ShippedDate
	GROUP BY e.EmployeeID, LastName
	)
SELECT Orders.EmployeeID, LastName, COUNT(OrderID) AS AllOrders, TotalLateOrders
FROM Orders 
	LEFT JOIN late
	ON Orders.EmployeeID=late.EmployeeID
GROUP BY Orders.EmployeeID, LastName, TotalLateOrders
ORDER BY EmployeeID;

--44.Show all employees in result: using Vailik's suggetions from the previous challenge
WITH late AS (
	SELECT EmployeeID, COUNT(*) AS LateOrders
	FROM Orders
	WHERE RequiredDate <= ShippedDate
	GROUP BY EmployeeID
	),
total AS (
	SELECT EmployeeID, COUNT(*) AS AllOrders
	FROM Orders
	GROUP BY EmployeeID
	)
SELECT e.EmployeeID, e.LastName, LateOrders, AllOrders
FROM Employees AS e
	LEFT JOIN late
	ON e.EmployeeID=late.EmployeeID
	JOIN total
	ON e.EmployeeID=total.EmployeeID
ORDER BY e.EmployeeID

--45. Replace NULL value from #44 with a 0
WITH late AS (
	SELECT EmployeeID, COUNT(*) AS LateOrders
	FROM Orders
	WHERE RequiredDate <= ShippedDate
	GROUP BY EmployeeID
	),
total AS (
	SELECT EmployeeID, COUNT(*) AS AllOrders
	FROM Orders
	GROUP BY EmployeeID
	)
SELECT e.EmployeeID, e.LastName, AllOrders,
	CASE WHEN LateOrders IS NULL THEN 0 ELSE LateOrders END AS LateOrders
FROM Employees AS e
	LEFT JOIN late
	ON e.EmployeeID=late.EmployeeID
	JOIN total
	ON e.EmployeeID=total.EmployeeID
ORDER BY e.EmployeeID;

--46. Late Orders vs. Total Orders - percentage
WITH late AS (
	SELECT EmployeeID, COUNT(*) AS LateOrders
	FROM Orders
	WHERE RequiredDate <= ShippedDate
	GROUP BY EmployeeID
	),
total AS (
	SELECT EmployeeID, COUNT(*) AS AllOrders
	FROM Orders
	GROUP BY EmployeeID
	)
SELECT e.EmployeeID, e.LastName, AllOrders,
	CASE WHEN LateOrders IS NULL THEN 0 ELSE LateOrders END AS LateOrders,
	CAST(LateOrders AS DEC(10,4))/AllOrders AS PercentageLateOrders
FROM Employees AS e
	LEFT JOIN late
	ON e.EmployeeID=late.EmployeeID
	JOIN total
	ON e.EmployeeID=total.EmployeeID
ORDER BY e.EmployeeID;

--47. Percent Late Orders - neater percentage**
WITH late AS (
	SELECT EmployeeID, COUNT(*) AS LateOrders
	FROM Orders
	WHERE RequiredDate <= ShippedDate
	GROUP BY EmployeeID
	),
total AS (
	SELECT EmployeeID, COUNT(*) AS AllOrders
	FROM Orders
	GROUP BY EmployeeID
	)
SELECT e.EmployeeID, e.LastName, AllOrders,
	ISNULL(LateOrders,0) AS LateOrders,
	CONVERT(
		DEC(2,2),
		(ISNULL(LateOrders,0)*1.00)/AllOrders) AS PercentLateOrders
FROM Employees AS e
	LEFT JOIN late
	ON e.EmployeeID=late.EmployeeID
	JOIN total
	ON e.EmployeeID=total.EmployeeID
ORDER BY e.EmployeeID;

--48. Customer grouping for sales campaign purposes
SELECT c.CustomerID, CompanyName, SUM(UnitPrice*Quantity) AS TotalOrderAmount, 
(CASE 
	WHEN SUM(UnitPrice*Quantity) < 1000 THEN 'Low'
	WHEN SUM(UnitPrice*Quantity) BETWEEN 1000 AND 5000 THEN 'Medium'
	WHEN SUM(UnitPrice*Quantity) BETWEEN 5001 AND 10000 THEN 'High'
	ELSE 'Very High'
	END) AS CustomerGroup
FROM Customers AS c
	JOIN Orders AS o
		ON o.CustomerID=c.CustomerID
	JOIN OrderDetails AS od
		ON od.OrderID=o.OrderID
WHERE YEAR(OrderDate) = 2016
GROUP BY c.CustomerID, CompanyName



--**This designation indicates that I looked up the solution query in the answer key. I was not able to locate an answer via Google/StackOverflow/etc.
--However, now knowing the MS SQL Server code for this type of query, my own GitHub is now a reference in addition to StackOverflow solutions!
